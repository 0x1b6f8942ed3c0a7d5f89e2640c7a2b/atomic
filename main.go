package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"sync"

	"github.com/gookit/color"
)

var (
	wg sync.WaitGroup
)

type AutoGenerated struct {
	Company struct {
		Hits          []any `json:"hits"`
		FilterOptions struct {
			BolagsformCode []any `json:"bolagsformCode"`
		} `json:"filterOptions"`
		Pager struct {
			PageIndex                     int   `json:"pageIndex"`
			PageCount                     int   `json:"pageCount"`
			VisiblePages                  []any `json:"visiblePages"`
			ShowBack                      bool  `json:"showBack"`
			ShowForward                   bool  `json:"showForward"`
			ShowFirstPageShortcut         bool  `json:"showFirstPageShortcut"`
			ShowFirstPageShortcutEllipsis bool  `json:"showFirstPageShortcutEllipsis"`
			ShowLastPageShortcut          bool  `json:"showLastPageShortcut"`
			ShowLastPageShortcutEllipsis  bool  `json:"showLastPageShortcutEllipsis"`
			AreMorePagesAvailable         bool  `json:"areMorePagesAvailable"`
		} `json:"pager"`
		TotalHits int `json:"totalHits"`
	} `json:"company"`
	Person struct {
		Hits []struct {
			Hidden                  bool   `json:"hidden"`
			ID                      string `json:"id"`
			FirstName               string `json:"firstName"`
			LastName                string `json:"lastName"`
			GivenName               string `json:"givenName"`
			Age                     int    `json:"age"`
			StreetAddress           string `json:"streetAddress"`
			City                    string `json:"city"`
			Married                 bool   `json:"married"`
			Gender                  string `json:"gender"`
			HasCorporateEngagements bool   `json:"hasCorporateEngagements"`
			Coordinates             struct {
				Lat string `json:"lat"`
				Lng string `json:"lng"`
			} `json:"coordinates"`
			PersonURL     string `json:"personUrl"`
			LoneKollenURL string `json:"loneKollenUrl"`
		} `json:"hits"`
		FilterOptions struct {
			Gender []struct {
				Input    string `json:"input"`
				Text     string `json:"text"`
				Key      string `json:"key"`
				Count    int    `json:"count"`
				Selected bool   `json:"selected"`
			} `json:"gender"`
			CorporateEngagements []struct {
				Input    string `json:"input"`
				Text     string `json:"text"`
				Key      string `json:"key"`
				Count    int    `json:"count"`
				Selected bool   `json:"selected"`
			} `json:"corporateEngagements"`
			MaritalStatus []struct {
				Input    string `json:"input"`
				Text     string `json:"text"`
				Key      string `json:"key"`
				Count    int    `json:"count"`
				Selected bool   `json:"selected"`
			} `json:"maritalStatus"`
			Age []struct {
				Input    string `json:"input"`
				Text     string `json:"text"`
				Key      string `json:"key"`
				Count    int    `json:"count"`
				Selected bool   `json:"selected"`
			} `json:"age"`
		} `json:"filterOptions"`
		Pager struct {
			PageIndex                     int   `json:"pageIndex"`
			PageCount                     int   `json:"pageCount"`
			VisiblePages                  []int `json:"visiblePages"`
			ShowBack                      bool  `json:"showBack"`
			ShowForward                   bool  `json:"showForward"`
			ShowFirstPageShortcut         bool  `json:"showFirstPageShortcut"`
			ShowFirstPageShortcutEllipsis bool  `json:"showFirstPageShortcutEllipsis"`
			ShowLastPageShortcut          bool  `json:"showLastPageShortcut"`
			ShowLastPageShortcutEllipsis  bool  `json:"showLastPageShortcutEllipsis"`
			AreMorePagesAvailable         bool  `json:"areMorePagesAvailable"`
		} `json:"pager"`
		TotalHits int `json:"totalHits"`
	} `json:"person"`
}

func main() {
	person := make(chan string)

	go incrementSSN(person)

	// Use multiple goroutines to process personal identity numbers concurrently
	for i := 0; i < 100; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for p := range person {
				sss(p)
			}
		}()
	}

	// Close the channel to signal that no more data will be sent

	// Wait for all goroutines to finish
	wg.Wait()
}

func incrementSSN(ssn chan string) {
	// Generate personal identity numbers for each day from January 1, 2005, to December 31, 2010
	for year := 2005; year <= 2010; year++ {
		for month := 03; month <= 12; month++ {
			for day := 21; day <= 31; day++ {
				for i := 0; i < 9999; i++ {
					ssn <- generateSSN(year, month, day, i)
				}
			}
		}
	}
	close(ssn)
}

func generateSSN(year, month, day, birthNumber int) string {
	// Format: YYYYMMDDXXXX
	twelveDigitString := fmt.Sprintf("%04d%02d%02d-%04d", year, month, day, birthNumber)

	return twelveDigitString
}

func extractBirthNumber(ssn string) int {
	// Extract the last three digits from the 12-digit string
	lastThreeDigits, _ := strconv.Atoi(ssn[len(ssn)-3:])
	return lastThreeDigits
}

func extractGender(birthNumber int) string {
	if birthNumber%2 == 0 {
		return "Female"
	}
	return "Male"
}

func extractDateOfBirth(ssn string) string {
	// Extract the year, month, and day from the 12-digit string
	year, _ := strconv.Atoi(ssn[:4])
	month, _ := strconv.Atoi(ssn[4:6])
	day, _ := strconv.Atoi(ssn[6:8])

	return fmt.Sprintf("%04d-%02d-%02d", year, month, day)
}

func sss(ssn string) {
	client := &http.Client{}
	var data = strings.NewReader(`{"who":"` + ssn + `","age":["16","120"],"phoneticSearch":true,"companyName":"","orgNr":"","firstName":"","lastName":"","personNumber":"","phone":"","address":"","postnr":"","postort":"","kommun":"","page":1,"url":"/sok/person?vem=200512102997&m=0&k=0&r=0&er=0&b=0&eb=0&amin=16&amax=120&fon=1&page=1"}`)
	req, err := http.NewRequest("POST", "https://www.ratsit.se/api/search/combined", data)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("authority", "www.ratsit.se")
	req.Header.Set("accept", "application/json, text/plain, */*")
	req.Header.Set("accept-language", "en-US,en;q=0.9")
	req.Header.Set("content-type", "application/json")
	req.Header.Set("cookie", `euconsent-v2=CP1vwsAP1vwsAAKAyASVAcEsAP_gAEPgACQgg1NX_H__bW9r8Xr3aft0eY1P99j77sQxBhfJE-4FyLvW_JwXx2EwNA26tqIKmRIEuzZBIQFlHJHURVigSogVryHsYkGcgTNKJ6BkgFMRI2dYCF5vmYtjeQKY5_p_d3fx2D-t_dv83dzzz8FHn3e5PmckcKCdQ58tDfn9bRKb-5IO9-78v4v09l_rk2_eTVn_pcvr7B-uft87_XU-9_fAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQagCzDQuIA-yJCQi0DCKBACIKwgIoEAAAAJA0QEAJAwKdgYBLrCRACBFAAMEAIAAUZAAgAAEgAQiACQAoEAAEAgEAAAAAAgEADAwADgAtBAIAAQHQMUwoAFAsIEiMiIUwIQoEggJbKBBICgQVwgCDDAigERMBAAgCQAVgAAAsVgMASAlYkECWUG0AABAAgFFKFQik6MAQwJmy1U4omaddtl_consent=1~43.3.9.6.9.13.6.4.15.9.5.2.11.1.7.1.3.2.10.33.4.6.9.17.2.9.20.7.20.5.20.6.3.2.1.4.11.29.4.14.9.3.10.6.2.9.6.6.9.8.29.4.5.3.1.27.1.17.10.9.1.8.6.2.8.3.4.146.65.1.17.1.18.25.35.5.18.9.7.41.2.4.18.24.4.9.6.5.2.14.18.7.3.2.2.8.28.8.6.3.10.4.20.2.13.4.10.11.1.3.22.16.2.6.8.6.11.6.5.33.11.8.1.10.28.12.1.5.19.9.6.40.17.4.9.15.8.7.3.12.7.2.4.1.7.12.13.22.13.2.14.10.1.4.15.2.4.9.4.5.4.7.13.5.15.4.13.4.14.10.15.2.5.6.2.2.1.2.14.7.4.8.2.9.10.18.12.13.2.18.1.1.3.1.1.9.25.4.1.19.8.4.8.5.4.8.4.4.2.14.2.13.4.2.6.9.6.3.2.2.3.5.2.3.6.10.11.6.3.19.11.3.1.2.3.9.19.26.3.10.7.6.4.3.4.6.3.3.3.3.1.1.1.6.11.3.1.1.11.6.1.10.5.8.3.2.2.4.3.2.2.7.15.7.14.1.3.3.4.5.4.3.2.2.5.5.1.2.9.7.9.1.5.3.7.10.11.1.3.1.1.2.1.3.2.6.1.12.8.1.3.1.1.2.2.7.7.1.4.3.6.1.2.1.4.1.1.4.1.1.2.1.8.1.7.4.3.3.3.5.3.15.1.15.10.28.1.2.2.12.3.4.1.6.3.4.7.1.3.1.4.1.5.3.1.3.4.1.5.2.3.1.2.2.6.2.1.2.2.2.4.1.1.1.2.2.1.1.1.1.2.1.1.1.2.2.1.1.2.1.2.1.7.1.4.1.2.1.1.1.1.2.1.4.2.1.1.9.1.6.2.1.6.2.3.2.1.1.1.2.5.2.4.1.1.2.2.1.1.7.1.2.2.1.2.1.2.3.1.1.2.4.1.1.1.5.1.3.6.3.1.5.5.4.1.2.3.1.4.3.2.2.3.1.1.1.1.1.11.1.3.1.1.2.2.5.2.3.3.5.2.7.1.1.2.5.1.9.5.1.3.1.8.4.5.1.9.1.1.1.2.1.1.1.4.2.13.1.1.3.1.2.2.3.1.2.1.1.1.2.1.3.1.1.1.1.2.4.1.5.1.2.4.3.8.2.2.9.7.2.2.1.2.1.3.1.6.1.7.1.1.2.6.3.1.2.1.200.200.100.100.200.400.100.100.100.200.200.1700.100.204.596.100.1000.800.500.400.200.200.500.1300.801.99.506.2594; _gcl_au=1.1.274754613.1700824372; lwuid=gnlw6fe3d2db-112c-4b1d-9494-314b83994810; _ga=GA1.1.890961131.1700824373; wisepops=%7B%22csd%22%3A1%2C%22popups%22%3A%7B%22458013%22%3A%7B%22dc%22%3A1%2C%22d%22%3A1700824373781%2C%22cl%22%3A1%7D%7D%2C%22sub%22%3A0%2C%22ucrn%22%3A37%2C%22cid%22%3A%2250552%22%2C%22v%22%3A4%2C%22bandit%22%3A%7B%22recos%22%3A%7B%7D%7D%7D; .AspNetCore.Antiforgery.73XflXSd7TU=CfDJ8LoIYxX-mZRInn6H7LXscSW_o6ygOSWwZ-YoHecXbosxiZMch4EsceoWhUD9wnoJFzm8p6RYKHXwUsS76No_FrobR63qV3TnNjToxPhkcxWRDhU1fqczPljlx9BRMQslR1VLdDfh_S0frnlx9Q-TLII; gtm_upi=MnE0TDA0SEpqQjBDYWE5Q2diOU5rMzR1bWhCejRxNExMeUo0dGFET0tNUT; imbox={"imboxUid":"2YcUVajrVm6UuXRSDHOR7JKwrz1"}; cmsads=; .AspNetCore.Mvc.CookieTempDataProvider=CfDJ8LoIYxX-mZRInn6H7LXscSWEsWSK4BQIJs94n8mBFSiSlMI8cFIxFbeepbzW39JcscEcGe09Os603_f2KboWqUfNRGbrY0qioMSTvj5hEB2xedxnHvOH35cm2_3Jf9UspL7Suac2gCNecl7t76xba0pAIugNEL2blmG4ZZlauKx5; __gads=ID=152a008f81c5d42f:T=1700824374:RT=1700824997:S=ALNI_MaCnvM3m66WW3K7w1JTJxsUrZyaCg; __gpi=UID=00000cdb0164214d:T=1700824374:RT=1700824997:S=ALNI_MblKceJaebCrniRlBsSLe1hc1YIlA; wisepops_props=%7B%22uid%22%3A%222000149%22%2C%22ue%22%3A%22lunartheshiba%40gmail.com%22%2C%22uds%22%3A%222023-11-24%22%2C%22srpat%22%3A%22false%22%2C%22srpap%22%3A%22false%22%2C%22srpna%22%3A%22false%22%2C%22pvn%22%3A%22null%22%2C%22cvn%22%3A%22null%22%2C%22pt%22%3A%22search%22%2C%22companypage%22%3A%22null%22%2C%22personpage%22%3A%22null%22%7D; .AspNetCore.Cookies=CfDJ8LoIYxX-mZRInn6H7LXscSXGSPEcopfT_c8Y6S5uuS3NwRNIt8oOEyU8t1PiRfhOpU-z1k9sNy_HYElA6oCAaKclt03cxpDqT4G8-RudCYZBQr7L0e8OUtS05ORcsykNPQT4KV7eBrSl_1_crh0_yhiRN8A65XTn40qez7cEcqhGNFAbyPVJqScYe8LbPy-lWi5S5zJek_zvzPD0_LxIk2K8oVxSldyKyQqI12i96c1lRnmUQ35DLR9VWAyXSobKEw8mItqdBxktc_h1jAcrgNu2jiE95D3-XA8El4H8lxON-okhG8ik-czMs814JHr40jgtQCLPnVEgD2dw4-TnuFKFIUhlU4L2-FYvyCv5Qe9eY8AcbFusYwUqtqKU9zlv5JxYBu_w9zgjKJg9utSZYTlgZDTW6GCarDsXFYxUlJTmJNabMw0-dvwmdBPmUMZPFOM6Ur2kUzMNsgLnaSIJjs52XsQZ2DfNBgWWAYfdR_6wrj045Cyh5DgbvMGdAqFlK5nzi4zmVeQpqeMlu-0twVRMXBsCIkfCevZ_ZoN13oxdQQQZmh_MFpr9ZDPGq_unstovShfoVDtSBElLuVBbxB1uQQwYA24WBwnfB2zyXXA2DRi35Sy4Od1IkUSFL6JUmqlqPV8au-tyHl0cWJ2dYU-RgIp8_Y3dqCx_6grhDOyhR4JXQ1FPkLk0M9hzvv4vahH77fmvaR0jhHVIxWinCBZRFWoyxjMC7ghNA7gnV-cA9GiUnxQsgcJS8abPEuCHtIrWxKBUHxu7zR97fXz6h-rRYwXbwehAETzyLBgoncnsoKmX8qGSzyYVomONNpDs8G1JKxKVarLNKf3utuf6i60P618ZEGfQji-HEGnlgPyEu4_vZREpXC5GzE-R21ztA4Si37BlvUvTSHqgjOKwuPA; wisepops_visits=%5B%222023-11-24T11%3A25%3A22.376Z%22%2C%222023-11-24T11%3A25%3A03.725Z%22%2C%222023-11-24T11%3A23%3A29.385Z%22%2C%222023-11-24T11%3A23%3A16.009Z%22%2C%222023-11-24T11%3A23%3A12.523Z%22%2C%222023-11-24T11%3A19%3A26.753Z%22%2C%222023-11-24T11%3A19%3A23.612Z%22%2C%222023-11-24T11%3A15%3A36.542Z%22%2C%222023-11-24T11%3A15%3A34.118Z%22%2C%222023-11-24T11%3A15%3A32.593Z%22%5D; wisepops_session=%7B%22arrivalOnSite%22%3A%222023-11-24T11%3A25%3A22.376Z%22%2C%22mtime%22%3A1700825122896%2C%22pageviews%22%3A1%2C%22popups%22%3A%7B%22458013%22%3A15%7D%2C%22bars%22%3A%7B%7D%2C%22sticky%22%3A%7B%7D%2C%22countdowns%22%3A%7B%7D%2C%22src%22%3A%22https%3A%2F%2Fwww.google.com%2F%22%2C%22utm%22%3A%7B%7D%2C%22testIp%22%3Anull%7D; _return_url=%7B%22Url%22%3A%22%2Fsok%2Fperson%3Fvem%3D00512102997%5Cu0026m%3D0%5Cu0026k%3D0%5Cu0026r%3D0%5Cu0026er%3D0%5Cu0026b%3D0%5Cu0026eb%3D0%5Cu0026amin%3D16%5Cu0026amax%3D120%5Cu0026fon%3D1%5Cu0026page%3D1%22%2C%22Text%22%3A%22s%5Cu00F6ket%22%7D; _ga_C2F6LZXLZK=GS1.1.1700824372.1.1.1700825201.0.0.0`)
	req.Header.Set("origin", "https://www.ratsit.se")
	req.Header.Set("sec-ch-ua", `"Google Chrome";v="119", "Chromium";v="119", "Not?A_Brand";v="24"`)
	req.Header.Set("sec-ch-ua-mobile", "?0")
	req.Header.Set("sec-ch-ua-platform", `"Chrome OS"`)
	req.Header.Set("sec-fetch-dest", "empty")
	req.Header.Set("sec-fetch-mode", "cors")
	req.Header.Set("sec-fetch-site", "same-origin")
	req.Header.Set("user-agent", "Mozilla/5.0 (X11; CrOS x86_64 14541.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36")
	resp, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	bodyText, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}
	var perstrukt AutoGenerated

	er := json.Unmarshal(bodyText, &perstrukt)
	if er != nil {
		fmt.Println(er.Error())
	}
	if len(perstrukt.Person.Hits) > 0 {

		file, err := os.OpenFile("2005.txt", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
		if err != nil {
			log.Fatal(err)
		}
		defer file.Close()

		color.Printf("  <fg=34d399>SSN:</> <fg=ffffff>%s</>\n", ssn)
		color.Printf("  <fg=34d399>First Name:</> <fg=ffffff>%s</>\n", perstrukt.Person.Hits[0].FirstName)
		color.Printf("  <fg=34d399>Last Name:</> <fg=ffffff>%s</>\n", perstrukt.Person.Hits[0].LastName)
		color.Printf("  <fg=34d399>Gender:</> <fg=ffffff>%s</>\n", perstrukt.Person.Hits[0].Gender)
		color.Printf("  <fg=34d399>Age:</> <fg=ffffff>%d</>\n", perstrukt.Person.Hits[0].Age)

		// Address information
		color.Printf("  <fg=34d399>Address:</> <fg=ffffff>%s, %s</>\n", perstrukt.Person.Hits[0].StreetAddress, perstrukt.Person.Hits[0].City)
		color.Printf("  <fg=34d399>Coordinates:</> <fg=ffffff>Lat: %s, Lng: %s</>\n", perstrukt.Person.Hits[0].Coordinates.Lat, perstrukt.Person.Hits[0].Coordinates.Lng)

		// Marital status and corporate engagements
		color.Printf("  <fg=34d399>Marital Status:</> <fg=ffffff>%t</>\n", perstrukt.Person.Hits[0].Married)
		color.Printf("  <fg=34d399>Has Corporate Engagements:</> <fg=ffffff>%t</>\n", perstrukt.Person.Hits[0].HasCorporateEngagements)
		fmt.Println()

		// Write detailed information to the file
		writeToFile(file, fmt.Sprintf("SSN: %s\n", ssn))
		writeToFile(file, fmt.Sprintf("First Name: %s\n", perstrukt.Person.Hits[0].FirstName))
		writeToFile(file, fmt.Sprintf("Last Name: %s\n", perstrukt.Person.Hits[0].LastName))
		writeToFile(file, fmt.Sprintf("Gender: %s\n", perstrukt.Person.Hits[0].Gender))
		writeToFile(file, fmt.Sprintf("Age: %d\n", perstrukt.Person.Hits[0].Age))

		// Address information
		writeToFile(file, fmt.Sprintf("Address: %s, %s\n", perstrukt.Person.Hits[0].StreetAddress, perstrukt.Person.Hits[0].City))
		writeToFile(file, fmt.Sprintf("Coordinates: Lat: %s, Lng: %s\n", perstrukt.Person.Hits[0].Coordinates.Lat, perstrukt.Person.Hits[0].Coordinates.Lng))

		// Marital status and corporate engagements
		writeToFile(file, fmt.Sprintf("Marital Status: %t\n", perstrukt.Person.Hits[0].Married))
		writeToFile(file, fmt.Sprintf("Has Corporate Engagements: %t\n", perstrukt.Person.Hits[0].HasCorporateEngagements))

		writeToFile(file, "\n")

	}

}
func writeToFile(file *os.File, text string) {
	_, err := file.WriteString(text)
	if err != nil {
		log.Fatal(err)
	}
}
